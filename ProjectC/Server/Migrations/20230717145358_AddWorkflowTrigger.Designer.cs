// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectC.Server.Data;

#nullable disable

namespace ProjectC.Server.Migrations
{
    [DbContext(typeof(ProjectCDbContext))]
    [Migration("20230717145358_AddWorkflowTrigger")]
    partial class AddWorkflowTrigger
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProjectC.Server.Data.Entities.RequestEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ArrivalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("JsonBody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JsonHeaders")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RequestRuleId")
                        .HasColumnType("int");

                    b.Property<int?>("WebhookRuleId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkflowActionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RequestRuleId");

                    b.HasIndex("WebhookRuleId");

                    b.HasIndex("WorkflowActionId");

                    b.ToTable("RequestEvent", (string)null);
                });

            modelBuilder.Entity("ProjectC.Server.Data.Entities.RequestRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PathRegex")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponseBody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResponseDelay")
                        .HasColumnType("int");

                    b.Property<string>("ResponseHeaders")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResponseStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RequestRule", (string)null);
                });

            modelBuilder.Entity("ProjectC.Server.Data.Entities.WebhookEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("JsonBody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JsonHeaders")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WebhookRuleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WebhookRuleId");

                    b.ToTable("WebhookEvent", (string)null);
                });

            modelBuilder.Entity("ProjectC.Server.Data.Entities.WebhookRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RedirectUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WebhookRule", (string)null);
                });

            modelBuilder.Entity("ProjectC.Server.Data.Entities.Workflow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Workflow", (string)null);
                });

            modelBuilder.Entity("ProjectC.Server.Data.Entities.WorkflowAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Method")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PathRegex")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RequestRuleId")
                        .HasColumnType("int");

                    b.Property<string>("ResponseBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ResponseDelay")
                        .HasColumnType("int");

                    b.Property<string>("ResponseHeaders")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ResponseStatus")
                        .HasColumnType("int");

                    b.Property<int>("WorkflowId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RequestRuleId");

                    b.HasIndex("WorkflowId");

                    b.ToTable("WorkflowAction", (string)null);
                });

            modelBuilder.Entity("ProjectC.Server.Data.Entities.WorkflowStorage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PropertyIdentifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkflowId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkflowId")
                        .IsUnique();

                    b.ToTable("WorkflowStorage", (string)null);
                });

            modelBuilder.Entity("ProjectC.Server.Data.Entities.WorkflowTrigger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WebhookEventId")
                        .HasColumnType("int");

                    b.Property<int>("WorkflowActionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WebhookEventId");

                    b.HasIndex("WorkflowActionId");

                    b.ToTable("WorkflowTrigger", (string)null);
                });

            modelBuilder.Entity("ProjectC.Server.Data.Entities.RequestEvent", b =>
                {
                    b.HasOne("ProjectC.Server.Data.Entities.RequestRule", "RequestRule")
                        .WithMany("RequestRuleEvents")
                        .HasForeignKey("RequestRuleId");

                    b.HasOne("ProjectC.Server.Data.Entities.WebhookRule", "WebhookRule")
                        .WithMany("WebhookRuleEvents")
                        .HasForeignKey("WebhookRuleId");

                    b.HasOne("ProjectC.Server.Data.Entities.WorkflowAction", "WorkflowAction")
                        .WithMany("WorkflowActionEvents")
                        .HasForeignKey("WorkflowActionId");

                    b.Navigation("RequestRule");

                    b.Navigation("WebhookRule");

                    b.Navigation("WorkflowAction");
                });

            modelBuilder.Entity("ProjectC.Server.Data.Entities.WebhookEvent", b =>
                {
                    b.HasOne("ProjectC.Server.Data.Entities.WebhookRule", "WebhookRule")
                        .WithMany("WebhookEvents")
                        .HasForeignKey("WebhookRuleId");

                    b.Navigation("WebhookRule");
                });

            modelBuilder.Entity("ProjectC.Server.Data.Entities.WorkflowAction", b =>
                {
                    b.HasOne("ProjectC.Server.Data.Entities.RequestRule", "RequestRule")
                        .WithMany("WorkflowActions")
                        .HasForeignKey("RequestRuleId");

                    b.HasOne("ProjectC.Server.Data.Entities.Workflow", "Workflow")
                        .WithMany("WorkflowActions")
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequestRule");

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("ProjectC.Server.Data.Entities.WorkflowStorage", b =>
                {
                    b.HasOne("ProjectC.Server.Data.Entities.Workflow", "Workflow")
                        .WithOne("WorkflowStorage")
                        .HasForeignKey("ProjectC.Server.Data.Entities.WorkflowStorage", "WorkflowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("ProjectC.Server.Data.Entities.WorkflowTrigger", b =>
                {
                    b.HasOne("ProjectC.Server.Data.Entities.WebhookEvent", "WebhookEvent")
                        .WithMany("WorkflowTriggers")
                        .HasForeignKey("WebhookEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectC.Server.Data.Entities.WorkflowAction", "WorkflowAction")
                        .WithMany("WorkflowTriggers")
                        .HasForeignKey("WorkflowActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WebhookEvent");

                    b.Navigation("WorkflowAction");
                });

            modelBuilder.Entity("ProjectC.Server.Data.Entities.RequestRule", b =>
                {
                    b.Navigation("RequestRuleEvents");

                    b.Navigation("WorkflowActions");
                });

            modelBuilder.Entity("ProjectC.Server.Data.Entities.WebhookEvent", b =>
                {
                    b.Navigation("WorkflowTriggers");
                });

            modelBuilder.Entity("ProjectC.Server.Data.Entities.WebhookRule", b =>
                {
                    b.Navigation("WebhookEvents");

                    b.Navigation("WebhookRuleEvents");
                });

            modelBuilder.Entity("ProjectC.Server.Data.Entities.Workflow", b =>
                {
                    b.Navigation("WorkflowActions");

                    b.Navigation("WorkflowStorage");
                });

            modelBuilder.Entity("ProjectC.Server.Data.Entities.WorkflowAction", b =>
                {
                    b.Navigation("WorkflowActionEvents");

                    b.Navigation("WorkflowTriggers");
                });
#pragma warning restore 612, 618
        }
    }
}
