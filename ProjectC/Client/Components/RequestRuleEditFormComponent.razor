@using AutoMapper;
@inject HttpClient Http
@inject IMapper mapper
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudDialog>
    <DialogContent>
        <div class="pa-5">
            <MudForm Model="@RequestRule" @ref=Form Validation="@(RequestRuleDtoValidator.ValidateValue)">
                <MudTextField @bind-Value="RequestRule.Path"
                              For="@(() => RequestRule.Path)"
                              Label="Path"
                              Variant="Variant.Text" />
                <MudSelect @bind-Value="RequestRule.Method"
                           For="@(() => RequestRule.Method)"
                           Label="Method"
                           Variant="Variant.Text">
                    <MudSelectItem Value="@RequestRuleMethodDto.GET">GET</MudSelectItem>
                    <MudSelectItem Value="@RequestRuleMethodDto.POST">POST</MudSelectItem>
                    <MudSelectItem Value="@RequestRuleMethodDto.PUT">PUT</MudSelectItem>
                    <MudSelectItem Value="@RequestRuleMethodDto.DELETE">DELETE</MudSelectItem>
                </MudSelect>
                <MudNumericField @bind-Value="RequestRule.ResponseStatus"
                                 For="@(() => RequestRule.ResponseStatus)"
                                 Label="Status"
                                 Variant="Variant.Text" />
                <MudNumericField @bind-Value="RequestRule.ResponseDelay"
                                 For="@(() => RequestRule.ResponseDelay)"
                                 Label="Delay"
                                 Variant="Variant.Text" />
                <div class="d-flex">
                    <MudTextField @bind-Value="RequestRule.ResponseHeaders"
                                  Label="Headers"
                                  Variant="Variant.Text"
                                  Lines="5" />
                    <MudTextField @bind-Value="RequestRule.ResponseBody"
                                  Label="Body"
                                  Variant="Variant.Text"
                                  Lines="5" />
                </div>
            </MudForm>
        </div>
    </DialogContent>
    <DialogActions>
        @if (RequestRule.Id != 0)
        {
            <MudButton Variant="Variant.Filled"
                        Color="Color.Error"
                        Disabled="@Deleting"
                        OnClick="Delete">
                @if (Deleting)
                {
                    <div class="d-flex justify-space-between align-center">
                        <div>Deleting</div>
                        <MudProgressCircular Class="ml-2" Size="Size.Small" Indeterminate="true" />
                    </div>
                }
                else
                {
                    <span>Delete</span>
                }
            </MudButton>
        }
        <MudButton Variant="Variant.Filled"
                    Color="Color.Primary"
                    Disabled="@Saving"
                    OnClick="Save">
            @if (Saving)
            {
                <div class="d-flex justify-space-between align-center">
                    <div>Saving</div>
                    <MudProgressCircular Class="ml-2" Size="Size.Small" Indeterminate="true" />
                </div>
            }
            else
            {
                <span>Save</span>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    public MudDialogInstance? MudDialog { get; set; }

    [Parameter]
    public RequestRuleDto RequestRule { get; set; } = new RequestRuleDto();

    private MudForm? Form;
    private RequestRuleDtoValidator RequestRuleDtoValidator = new RequestRuleDtoValidator();
    private bool Deleting = false;
    private bool Saving = false;

    private async Task Save()
    {
        Saving = true;

        if (Form is null)
        {
            Snackbar.Add("Form couldn't be loaded", Severity.Warning);
            Saving = false;
            return;
        }

        await Form.Validate();
        if (!Form.IsValid)
        {
            Snackbar.Add("Invalid request rule data", Severity.Warning);
            Saving = false;
            return;
        }

        if (RequestRule.Id != 0)
        {
            var response = await Http.PutAsJsonAsync<EditRequestRuleDto>("api/v1/request", mapper.Map<EditRequestRuleDto>(RequestRule));
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Request rule successfully updated", Severity.Success);
                MudDialog?.Close(DialogResult.Ok(true));
            }
            else
            {
                Snackbar.Add("Request rule couldn't be updated", Severity.Error);
            }
        }
        else
        {
            var response = await Http.PostAsJsonAsync<CreateRequestRuleDto>("api/v1/request", mapper.Map<CreateRequestRuleDto>(RequestRule));
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Request rule successfully created", Severity.Success);
                MudDialog?.Close(DialogResult.Ok(true));
            }
            else
            {
                Snackbar.Add("Request rule couldn't be created", Severity.Error);
            }
        }

        Saving = false;
    }

    private async Task Delete()
    {
        var result = await DialogService.ShowConfirmDialog(
            "Confirm",
            "Are you sure you want to delete this Request Rule?",
            "Delete",
            Color.Error);
        if (result)
        {
            Deleting = true;

            var response = await Http.DeleteAsync($"api/v1/request/{RequestRule.Id}");
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Request rule successfully deleted", Severity.Success);
                MudDialog?.Close(DialogResult.Ok(true));
            }
            else
            {
                Snackbar.Add("Request rule couldn't be deleted", Severity.Error);
            }

            Deleting = false;
        }
    }
}
