@using AutoMapper;
@inject HttpClient Http
@inject IMapper mapper

<MudDialog DisableSidePadding="true">
    <DialogContent>
        <MudContainer Style="max-height: 80%; overflow-y: scroll">
            <EditForm Model="@WebhookRule">
                <MudSelect @bind-Value="WebhookRule.Method"
                           Label="Method"
                           Variant="Variant.Text">
                    <MudSelectItem Value="@WebhookRuleMethodDto.POST">POST</MudSelectItem>
                    <MudSelectItem Value="@WebhookRuleMethodDto.PUT">PUT</MudSelectItem>
                </MudSelect>
                <MudTextField @bind-Value="WebhookRule.Path"
                              Label="Path"
                              Variant="Variant.Text" />
                <MudTextField @bind-Value="WebhookRule.Description"
                              Label="Description"
                              Variant="Variant.Text" />
                <MudTextField @bind-Value="WebhookRule.RedirectUrl"
                              Label="Redirect Url"
                              Variant="Variant.Text" />
            </EditForm>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        @if (WebhookRule.Id != 0)
        {
            <MudButton Variant="Variant.Filled"
                       Color="Color.Error"
                       OnClick="Delete">
                Delete
            </MudButton>
        }
        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   Class="ml-auto"
                   OnClick="Save">
            Save
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    public MudDialogInstance? MudDialog { get; set; }

    [Parameter]
    public WebhookRuleDto WebhookRule { get; set; } = new WebhookRuleDto();

    private async Task Save()
    {
        if (WebhookRule.Id != 0)
        {
            await Http.PutAsJsonAsync<EditWebhookRuleDto>("api/v1/webhook", mapper.Map<EditWebhookRuleDto>(WebhookRule));
        }
        else
        {
            await Http.PostAsJsonAsync<CreateWebhookRuleDto>("api/v1/webhook", mapper.Map<CreateWebhookRuleDto>(WebhookRule));
        }
        MudDialog?.Close(DialogResult.Ok(true));
    }

    private async Task Delete()
    {
        await Http.DeleteAsync($"api/v1/webhook/{WebhookRule.Id}");
        MudDialog?.Close(DialogResult.Ok(true));
    }
}
