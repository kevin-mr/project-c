@inject HttpClient Http
@inject IDialogService DialogService

@if (loading)
{
    <MudProgressCircular Indeterminate="true" />
}
@if (WebhookRules.Count() > 0)
{
    <MudPaper>
        <MudList>
            @foreach (var webhookRule in WebhookRules)
            {
                <MudListItem>
                    <WebhookRuleComponent WebhookRule=@webhookRule 
                                          OnEdit="@(async () => await EditAsync(webhookRule))"
                                          OnViewEvents="@(async () => await ViewEventsAsync(webhookRule))"></WebhookRuleComponent>
                </MudListItem>
            }
        </MudList>
    </MudPaper>
}

@code {
    private WebhookRuleDto[] WebhookRules = Array.Empty<WebhookRuleDto>();
    private bool loading = false;

    protected override async Task OnInitializedAsync()
    {
        await RefreshWebhookRulesAsync();
        await base.OnInitializedAsync();
    }

    public async Task RefreshWebhookRulesAsync()
    {
        loading = true;
        var webhookRules = await Http.GetFromJsonAsync<WebhookRuleDto[]>("api/v1/webhook");
        if (webhookRules is not null)
        {
            WebhookRules = webhookRules;
            loading = false;
            StateHasChanged();
        }
    }

    private async Task EditAsync(WebhookRuleDto webhookRule)
    {
        var parameters = new DialogParameters
        {
            ["WebhookRule"] = webhookRule
        };
        var dialog = await DialogService.ShowAsync<WebhookRuleEditFormComponent>("Request Rule", parameters, DialogUtils.DefaultDialogOptions);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await RefreshWebhookRulesAsync();
        }
    }

    private async Task ViewEventsAsync(WebhookRuleDto webhookRule)
    {
        var parameters = new DialogParameters
        {
            ["WebhookRule"] = webhookRule
        };
        var dialog = await DialogService.ShowAsync<WebhookEventsComponent>("Webhook Events", parameters, DialogUtils.DefaultDialogOptions);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await RefreshWebhookRulesAsync();
        }
    }
}
