@inject HttpClient Http
@inject IDialogService DialogService

@if (loading)
{
    <MudProgressCircular Indeterminate="true" />
}
@if (Workflows.Count() > 0)
{
    <MudPaper>
        <MudExpansionPanels>
            @foreach (var workflow in Workflows)
            {
                <MudExpansionPanel>
                    <TitleContent>
                        <div class="d-flex justify-space-between align-center">
                            <MudText Class="mt-1">@workflow.Name</MudText>
                            <div class="d-flex align-center" @onclick:stopPropagation="true" @onclick:preventDefault="true">
                                <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="@(async () => await EditAsync(workflow))"></MudIconButton>
                                <MudIconButton Icon="@Icons.Material.Filled.Storage" OnClick="@(async () => await ViewWorkflowStorageAsync(workflow))"></MudIconButton>
                                <MudChip Class="mr-2" Variant="Variant.Text" Color="Color.Primary" @onclick="@(async () => await ViewWorkflowActionsAsync(workflow))">
                                    @workflow.WorkflowActions.Count
                                </MudChip>
                            </div>
                        </div>
                    </TitleContent>
                    <ChildContent>
                        <MudTable Items="@workflow.WorkflowActions" Dense="true">
                            <HeaderContent>
                                <MudTh>Action</MudTh>
                                <MudTh>Path</MudTh>
                                <MudTh>Method</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="Name">
                                    @context.Description
                                </MudTd>
                                @if (context.RequestRule is not null)
                                {
                                    <MudTd DataLabel="Path">
                                        @context.RequestRule.Path
                                    </MudTd>
                                    <MudTd DataLabel="Method">
                                        @context.RequestRule.MethodLabel
                                    </MudTd>
                                }
                            </RowTemplate>
                        </MudTable>
                    </ChildContent>
                </MudExpansionPanel>
            }
        </MudExpansionPanels>
    </MudPaper>
}

@code {
    private WorkflowDto[] Workflows = Array.Empty<WorkflowDto>();
    private bool loading = false;

    private async Task EditAsync(WorkflowDto workflow)
    {
        var parameters = new DialogParameters
        {
            ["Workflow"] = workflow
        };
        var dialog = await DialogService.ShowAsync<WorkflowEditFormComponent>("Workflow", parameters, DialogUtils.DefaultDialogOptions);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await RefreshWorkflowsAsync();
        }
    }

    private async Task ViewWorkflowActionsAsync(WorkflowDto workflow)
    {
        var parameters = new DialogParameters
        {
            ["Workflow"] = workflow,
            ["WorkflowActions"] = workflow.WorkflowActions,
        };
        var dialog = await DialogService.ShowAsync<WorkflowActionsComponent>("Workflow Actions", parameters, DialogUtils.DefaultDialogOptionsWidth(MaxWidth.Medium));
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await RefreshWorkflowsAsync();
        }
    }

    private async Task ViewWorkflowStorageAsync(WorkflowDto workflow)
    {
        var parameters = new DialogParameters
        {
            ["Workflow"] = workflow,
        };
        var dialog = await DialogService.ShowAsync<WorkflowStorageComponent>("Workflow Storage", parameters, DialogUtils.DefaultDialogOptions);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await RefreshWorkflowsAsync();
        }
    }

    public async Task RefreshWorkflowsAsync()
    {
        loading = true;
        var workflows = await Http.GetFromJsonAsync<WorkflowDto[]>("api/v1/workflow");
        if (workflows is not null)
        {
            Workflows = workflows;
            loading = false;
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await RefreshWorkflowsAsync();
        await base.OnInitializedAsync();
    }
}
