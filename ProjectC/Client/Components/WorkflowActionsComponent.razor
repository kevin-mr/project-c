@using AutoMapper;
@inject HttpClient Http
@inject IMapper mapper
@inject IDialogService DialogService

<MudDialog>
    <DialogContent>
        <div class="pa-5">
            <MudExpansionPanels>
                @foreach (var workflowAction in WorkflowActions)
                {
                    <MudExpansionPanel>
                        <TitleContent>
                            <div class="d-flex justify-space-between align-center">
                                <MudText>@workflowAction.Description</MudText>
                                <div class="mr-3" @onclick:stopPropagation="true" @onclick:preventDefault="true">
                                    <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="@(async () => await EditAsync(workflowAction))"></MudIconButton>
                                </div>
                            </div>
                        </TitleContent>
                        <ChildContent>
                            <MudSimpleTable Dense="true">
                                <tbody>
                                    @if (workflowAction.RequestRule is not null)
                                    {
                                        <tr>
                                            <td>
                                                <MudText>Path:</MudText>
                                            </td>
                                            <td>
                                                <MudText Typo="Typo.body2">@workflowAction.RequestRule.Path</MudText>
                                            </td>
                                            <td>
                                                <MudText>Method:</MudText>
                                            </td>
                                            <td>
                                                <MudText Typo="Typo.body2">@workflowAction.RequestRule.Method</MudText>
                                            </td>
                                        </tr>
                                    }
                                    else
                                    {
                                        <tr>
                                            <td>
                                                <MudText>Path:</MudText>
                                            </td>
                                            <td>
                                                <MudText Typo="Typo.body2">@workflowAction.Path</MudText>
                                            </td>
                                            <td>
                                                <MudText>Method:</MudText>
                                            </td>
                                            <td>
                                                <MudText Typo="Typo.body2">@workflowAction.MethodLabel</MudText>
                                            </td>
                                        </tr>
                                    }
                                    <tr>
                                        <td>
                                            <MudText>Status:</MudText>
                                        </td>
                                        <td>
                                            <MudText Typo="Typo.body2">@workflowAction.ResponseStatus</MudText>
                                        </td>
                                        <td>
                                            <MudText>Delay:</MudText>
                                        </td>
                                        <td>
                                            <MudText Typo="Typo.body2">@workflowAction.ResponseDelay</MudText>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td>
                                            <MudText>Body:</MudText>
                                        </td>
                                        <td>
                                            <MudText Typo="Typo.body2">@workflowAction.ResponseBody</MudText>
                                        </td>
                                    </tr>
                                </tbody>
                            </MudSimpleTable>
                            <MudDivider Class="my-3"></MudDivider>
                            <div class="d-flex justify-end">
                                <MudButton Variant="Variant.Outlined"
                                           Color="Color.Primary"
                                           Size="Size.Small"
                                           Class="mb-3"
                                           OnClick="@(async () => await AddTriggerAsync(workflowAction))">
                                    Add Trigger
                                </MudButton>
                            </div>
                            <MudTable Items="workflowAction.WorkflowTriggers" Dense="true">
                                <HeaderContent>
                                    <MudTh>Webhook Rule</MudTh>
                                    <MudTh>Description</MudTh>
                                    <MudTh>Actions</MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd DataLabel="Webhook Rule">
                                        @context.WebhookRuleDescription
                                    </MudTd>
                                    <MudTd DataLabel="Description">
                                        @context.Description
                                    </MudTd>
                                    <MudTd DataLabel="Actions">
                                        <div class="d-flex justify-end">
                                            <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                                                           OnClick="@(async () => await EditTriggerAsync(workflowAction, @context))"></MudIconButton>
                                        </div>
                                    </MudTd>
                                </RowTemplate>
                            </MudTable>
                        </ChildContent>
                    </MudExpansionPanel>
                }
            </MudExpansionPanels>
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" 
                   Color="Color.Primary"
                   @onclick="@(async () => await AddAsync())">
            Add Action
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter]
    public WorkflowDto Workflow { get; set; } = new WorkflowDto();

    [Parameter]
    public List<WorkflowActionDto> WorkflowActions { get; set; } = new List<WorkflowActionDto>();

    protected override async Task OnInitializedAsync()
    {
        await RefreshWorkflowActionsAsync();
        await base.OnInitializedAsync();
    }

    private async Task EditAsync(WorkflowActionDto workflowAction)
    {
        var parameters = new DialogParameters
        {
            ["Workflow"] = Workflow,
            ["WorkflowAction"] = workflowAction
        };
        var dialog = await DialogService.ShowAsync<WorkflowActionEditFormComponent>("Workflow Action", parameters, DialogUtils.DefaultDialogOptions);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await RefreshWorkflowActionsAsync();
        }
    }

    private async Task AddAsync()
    {
        var parameters = new DialogParameters
        {
            ["Workflow"] = Workflow,
            ["WorkflowAction"] = new WorkflowActionDto(),
        };
        var dialog = await DialogService.ShowAsync<WorkflowActionEditFormComponent>("Workflow Action", parameters, DialogUtils.DefaultDialogOptions);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await RefreshWorkflowActionsAsync();
        }
    }

    public async Task RefreshWorkflowActionsAsync()
    {
        var workflowActions = await Http.GetFromJsonAsync<WorkflowActionDto[]>($"api/v1/workflow/{Workflow.Id}/action");
        if (workflowActions is not null)
        {
            WorkflowActions = workflowActions.ToList();
            StateHasChanged();
        }
    }

    private async Task EditTriggerAsync(WorkflowActionDto workflowAction,WorkflowTriggerDto workflowTrigger)
    {
        var parameters = new DialogParameters
        {
            ["WorkflowAction"] = workflowAction,
            ["WorkflowTrigger"] = workflowTrigger
        };
        var dialog = await DialogService.ShowAsync<WorkflowTriggerEditFormComponent>("Workflow Trigger", parameters, DialogUtils.DefaultDialogOptions);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await RefreshWorkflowActionsAsync();
        }
    }

    private async Task AddTriggerAsync(WorkflowActionDto workflowAction)
    {
        var parameters = new DialogParameters
        {
            ["WorkflowAction"] = workflowAction,
            ["WorkflowTrigger"] = new WorkflowTriggerDto(),
        };
        var dialog = await DialogService.ShowAsync<WorkflowTriggerEditFormComponent>("Workflow Trigger", parameters, DialogUtils.DefaultDialogOptions);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await RefreshWorkflowActionsAsync();
        }
    }
}
