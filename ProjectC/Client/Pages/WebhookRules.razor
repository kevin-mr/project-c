@page "/webhook-rules"
@inject IDialogService DialogService

<MudGrid Spacing="2" Class="mt-5">
    <MudItem sm="6">
        <div class="mb-5">
            <MudTooltip Text="Clear Request Events" Arrow="true" Placement="Placement.Right">
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Secondary" OnClick="DeleteRequestEventsAsync"></MudIconButton>
            </MudTooltip>
        </div>
        <WebhookEventsComponent @ref="WebhookEventsComponent"></WebhookEventsComponent>
    </MudItem>
    <MudItem sm="6">
        <div class="d-flex justify-end mb-5">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddWebhookRule">Add Webhook</MudButton>
        </div>
        <WebhookRulesComponent @ref="WebhookRulesComponent"></WebhookRulesComponent>
    </MudItem>
</MudGrid>

@code {
    private WebhookRulesComponent? WebhookRulesComponent;
    private WebhookEventsComponent? WebhookEventsComponent;

    private async Task AddWebhookRule()
    {
        var dialog = await DialogService.ShowAsync<WebhookRuleEditFormComponent>("Webhook Rule", DialogUtils.DefaultDialogOptions);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            if (WebhookRulesComponent is not null)
            {
                await WebhookRulesComponent.RefreshWebhookRulesAsync();
            }
        }
    }

    private async Task DeleteRequestEventsAsync()
    {
        if (WebhookEventsComponent is not null)
        {
            await WebhookEventsComponent.DeleteRequestEventsAsync();
        }
    }
}
