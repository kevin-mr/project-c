@page "/"
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.SignalR.Client

<MudGrid Spacing="2" Class="mt-5">
    <MudItem sm="6">
        <MudText Typo="Typo.h4" Class="ma-2">
            History
        </MudText>
        <MudPaper>
            <RequestList Items=@requestItems OnSelectedItem="SelectedItemChanged"></RequestList>
        </MudPaper>
    </MudItem>
    <MudItem sm="6">
        @if (requestSelected is not null)
        {
            <MudText Typo="Typo.h4" Class="ma-2">
                Headers
            </MudText>
            <MudPaper>
                <RequestHeaderList Headers=@requestSelected.Headers></RequestHeaderList>
            </MudPaper>
            <MudText Typo="Typo.h4" Class="ma-2">
                Body
            </MudText>
            <MudPaper>
                <RequestBody Body=@requestSelected.Body></RequestBody>
            </MudPaper>
        }
    </MudItem>
</MudGrid>

@code {
    private HubConnection? hubConnection;
    private RequestDto? requestSelected;
    private List<RequestDto> requests = new List<RequestDto>();
    private List<RequestItemDto> requestItems => requests
        .Select(x => new RequestItemDto
        {
            Id = x.Id,
            Method = x.Method,
            ArrivalDate = x.ArrivalDate
        })
        .ToList();

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/request-history"))
            .Build();

        hubConnection.On<RequestDto>("NewRequestCaught", (request) =>
        {
            if(request is not null)
            {
                requestSelected = request;
                requests.Add(request);
                StateHasChanged();
            }
        });

        await hubConnection.StartAsync();
    }

    private bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    private async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private void SelectedItemChanged(RequestItemDto requestItem)
    {
        var request = requests.FirstOrDefault(x => x.Id == requestItem.Id);
        if(request is not null)
        {
            requestSelected = request;
            StateHasChanged();
        }
    }
}